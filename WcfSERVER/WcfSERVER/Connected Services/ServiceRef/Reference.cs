//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfSERVER.ServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/WcfSERVER")]
    [System.SerializableAttribute()]
    public partial class Client : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string dateRegistrationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIO {
            get {
                return this.FIOField;
            }
            set {
                if ((object.ReferenceEquals(this.FIOField, value) != true)) {
                    this.FIOField = value;
                    this.RaisePropertyChanged("FIO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dateRegistration {
            get {
                return this.dateRegistrationField;
            }
            set {
                if ((object.ReferenceEquals(this.dateRegistrationField, value) != true)) {
                    this.dateRegistrationField = value;
                    this.RaisePropertyChanged("dateRegistration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mail {
            get {
                return this.mailField;
            }
            set {
                if ((object.ReferenceEquals(this.mailField, value) != true)) {
                    this.mailField = value;
                    this.RaisePropertyChanged("mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/WcfSERVER")]
    [System.SerializableAttribute()]
    public partial class Service : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double costField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool delField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double cost {
            get {
                return this.costField;
            }
            set {
                if ((this.costField.Equals(value) != true)) {
                    this.costField = value;
                    this.RaisePropertyChanged("cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool del {
            get {
                return this.delField;
            }
            set {
                if ((this.delField.Equals(value) != true)) {
                    this.delField = value;
                    this.RaisePropertyChanged("del");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Worker", Namespace="http://schemas.datacontract.org/2004/07/WcfSERVER")]
    [System.SerializableAttribute()]
    public partial class Worker : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string dateBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string dateRegistrationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string directionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string genderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIO {
            get {
                return this.FIOField;
            }
            set {
                if ((object.ReferenceEquals(this.FIOField, value) != true)) {
                    this.FIOField = value;
                    this.RaisePropertyChanged("FIO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dateBirth {
            get {
                return this.dateBirthField;
            }
            set {
                if ((object.ReferenceEquals(this.dateBirthField, value) != true)) {
                    this.dateBirthField = value;
                    this.RaisePropertyChanged("dateBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dateRegistration {
            get {
                return this.dateRegistrationField;
            }
            set {
                if ((object.ReferenceEquals(this.dateRegistrationField, value) != true)) {
                    this.dateRegistrationField = value;
                    this.RaisePropertyChanged("dateRegistration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string direction {
            get {
                return this.directionField;
            }
            set {
                if ((object.ReferenceEquals(this.directionField, value) != true)) {
                    this.directionField = value;
                    this.RaisePropertyChanged("direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string gender {
            get {
                return this.genderField;
            }
            set {
                if ((object.ReferenceEquals(this.genderField, value) != true)) {
                    this.genderField = value;
                    this.RaisePropertyChanged("gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mail {
            get {
                return this.mailField;
            }
            set {
                if ((object.ReferenceEquals(this.mailField, value) != true)) {
                    this.mailField = value;
                    this.RaisePropertyChanged("mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/WCFserver")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateLastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfSERVER.ServiceRef.Client clientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfSERVER.ServiceRef.Service[] servicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfSERVER.ServiceRef.Worker workerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateLastUpdate {
            get {
                return this.DateLastUpdateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateLastUpdateField, value) != true)) {
                    this.DateLastUpdateField = value;
                    this.RaisePropertyChanged("DateLastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((object.ReferenceEquals(this.EndDateField, value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((object.ReferenceEquals(this.StartDateField, value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfSERVER.ServiceRef.Client client {
            get {
                return this.clientField;
            }
            set {
                if ((object.ReferenceEquals(this.clientField, value) != true)) {
                    this.clientField = value;
                    this.RaisePropertyChanged("client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfSERVER.ServiceRef.Service[] services {
            get {
                return this.servicesField;
            }
            set {
                if ((object.ReferenceEquals(this.servicesField, value) != true)) {
                    this.servicesField = value;
                    this.RaisePropertyChanged("services");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfSERVER.ServiceRef.Worker worker {
            get {
                return this.workerField;
            }
            set {
                if ((object.ReferenceEquals(this.workerField, value) != true)) {
                    this.workerField = value;
                    this.RaisePropertyChanged("worker");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.IClients")]
    public interface IClients {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/AddClient", ReplyAction="http://tempuri.org/IClients/AddClientResponse")]
        void AddClient(WcfSERVER.ServiceRef.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/AddClient", ReplyAction="http://tempuri.org/IClients/AddClientResponse")]
        System.Threading.Tasks.Task AddClientAsync(WcfSERVER.ServiceRef.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/UpdateClient", ReplyAction="http://tempuri.org/IClients/UpdateClientResponse")]
        void UpdateClient(WcfSERVER.ServiceRef.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/UpdateClient", ReplyAction="http://tempuri.org/IClients/UpdateClientResponse")]
        System.Threading.Tasks.Task UpdateClientAsync(WcfSERVER.ServiceRef.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/DeleteClient", ReplyAction="http://tempuri.org/IClients/DeleteClientResponse")]
        void DeleteClient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/DeleteClient", ReplyAction="http://tempuri.org/IClients/DeleteClientResponse")]
        System.Threading.Tasks.Task DeleteClientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/GetClients", ReplyAction="http://tempuri.org/IClients/GetClientsResponse")]
        WcfSERVER.ServiceRef.Client[] GetClients(int page, int count, string order_by, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/GetClients", ReplyAction="http://tempuri.org/IClients/GetClientsResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Client[]> GetClientsAsync(int page, int count, string order_by, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/GetClientsByFIO", ReplyAction="http://tempuri.org/IClients/GetClientsByFIOResponse")]
        WcfSERVER.ServiceRef.Client[] GetClientsByFIO(string FIO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/GetClientsByFIO", ReplyAction="http://tempuri.org/IClients/GetClientsByFIOResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Client[]> GetClientsByFIOAsync(string FIO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/GetClientByID", ReplyAction="http://tempuri.org/IClients/GetClientByIDResponse")]
        WcfSERVER.ServiceRef.Client GetClientByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/GetClientByID", ReplyAction="http://tempuri.org/IClients/GetClientByIDResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Client> GetClientByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/CountClients", ReplyAction="http://tempuri.org/IClients/CountClientsResponse")]
        int CountClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClients/CountClients", ReplyAction="http://tempuri.org/IClients/CountClientsResponse")]
        System.Threading.Tasks.Task<int> CountClientsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientsChannel : WcfSERVER.ServiceRef.IClients, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientsClient : System.ServiceModel.ClientBase<WcfSERVER.ServiceRef.IClients>, WcfSERVER.ServiceRef.IClients {
        
        public ClientsClient() {
        }
        
        public ClientsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddClient(WcfSERVER.ServiceRef.Client client) {
            base.Channel.AddClient(client);
        }
        
        public System.Threading.Tasks.Task AddClientAsync(WcfSERVER.ServiceRef.Client client) {
            return base.Channel.AddClientAsync(client);
        }
        
        public void UpdateClient(WcfSERVER.ServiceRef.Client client) {
            base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task UpdateClientAsync(WcfSERVER.ServiceRef.Client client) {
            return base.Channel.UpdateClientAsync(client);
        }
        
        public void DeleteClient(int id) {
            base.Channel.DeleteClient(id);
        }
        
        public System.Threading.Tasks.Task DeleteClientAsync(int id) {
            return base.Channel.DeleteClientAsync(id);
        }
        
        public WcfSERVER.ServiceRef.Client[] GetClients(int page, int count, string order_by, int type) {
            return base.Channel.GetClients(page, count, order_by, type);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Client[]> GetClientsAsync(int page, int count, string order_by, int type) {
            return base.Channel.GetClientsAsync(page, count, order_by, type);
        }
        
        public WcfSERVER.ServiceRef.Client[] GetClientsByFIO(string FIO) {
            return base.Channel.GetClientsByFIO(FIO);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Client[]> GetClientsByFIOAsync(string FIO) {
            return base.Channel.GetClientsByFIOAsync(FIO);
        }
        
        public WcfSERVER.ServiceRef.Client GetClientByID(int ID) {
            return base.Channel.GetClientByID(ID);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Client> GetClientByIDAsync(int ID) {
            return base.Channel.GetClientByIDAsync(ID);
        }
        
        public int CountClients() {
            return base.Channel.CountClients();
        }
        
        public System.Threading.Tasks.Task<int> CountClientsAsync() {
            return base.Channel.CountClientsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.IServices")]
    public interface IServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/AddService", ReplyAction="http://tempuri.org/IServices/AddServiceResponse")]
        void AddService(WcfSERVER.ServiceRef.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/AddService", ReplyAction="http://tempuri.org/IServices/AddServiceResponse")]
        System.Threading.Tasks.Task AddServiceAsync(WcfSERVER.ServiceRef.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/UpdateService", ReplyAction="http://tempuri.org/IServices/UpdateServiceResponse")]
        void UpdateService(WcfSERVER.ServiceRef.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/UpdateService", ReplyAction="http://tempuri.org/IServices/UpdateServiceResponse")]
        System.Threading.Tasks.Task UpdateServiceAsync(WcfSERVER.ServiceRef.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/DeleteService", ReplyAction="http://tempuri.org/IServices/DeleteServiceResponse")]
        void DeleteService(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/DeleteService", ReplyAction="http://tempuri.org/IServices/DeleteServiceResponse")]
        System.Threading.Tasks.Task DeleteServiceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/RestoreService", ReplyAction="http://tempuri.org/IServices/RestoreServiceResponse")]
        void RestoreService(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/RestoreService", ReplyAction="http://tempuri.org/IServices/RestoreServiceResponse")]
        System.Threading.Tasks.Task RestoreServiceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetServices", ReplyAction="http://tempuri.org/IServices/GetServicesResponse")]
        WcfSERVER.ServiceRef.Service[] GetServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetServices", ReplyAction="http://tempuri.org/IServices/GetServicesResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Service[]> GetServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetServiceByID", ReplyAction="http://tempuri.org/IServices/GetServiceByIDResponse")]
        WcfSERVER.ServiceRef.Service GetServiceByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetServiceByID", ReplyAction="http://tempuri.org/IServices/GetServiceByIDResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Service> GetServiceByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/CountServices", ReplyAction="http://tempuri.org/IServices/CountServicesResponse")]
        int CountServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/CountServices", ReplyAction="http://tempuri.org/IServices/CountServicesResponse")]
        System.Threading.Tasks.Task<int> CountServicesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicesChannel : WcfSERVER.ServiceRef.IServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicesClient : System.ServiceModel.ClientBase<WcfSERVER.ServiceRef.IServices>, WcfSERVER.ServiceRef.IServices {
        
        public ServicesClient() {
        }
        
        public ServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddService(WcfSERVER.ServiceRef.Service service) {
            base.Channel.AddService(service);
        }
        
        public System.Threading.Tasks.Task AddServiceAsync(WcfSERVER.ServiceRef.Service service) {
            return base.Channel.AddServiceAsync(service);
        }
        
        public void UpdateService(WcfSERVER.ServiceRef.Service service) {
            base.Channel.UpdateService(service);
        }
        
        public System.Threading.Tasks.Task UpdateServiceAsync(WcfSERVER.ServiceRef.Service service) {
            return base.Channel.UpdateServiceAsync(service);
        }
        
        public void DeleteService(int id) {
            base.Channel.DeleteService(id);
        }
        
        public System.Threading.Tasks.Task DeleteServiceAsync(int id) {
            return base.Channel.DeleteServiceAsync(id);
        }
        
        public void RestoreService(int id) {
            base.Channel.RestoreService(id);
        }
        
        public System.Threading.Tasks.Task RestoreServiceAsync(int id) {
            return base.Channel.RestoreServiceAsync(id);
        }
        
        public WcfSERVER.ServiceRef.Service[] GetServices() {
            return base.Channel.GetServices();
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Service[]> GetServicesAsync() {
            return base.Channel.GetServicesAsync();
        }
        
        public WcfSERVER.ServiceRef.Service GetServiceByID(int id) {
            return base.Channel.GetServiceByID(id);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Service> GetServiceByIDAsync(int id) {
            return base.Channel.GetServiceByIDAsync(id);
        }
        
        public int CountServices() {
            return base.Channel.CountServices();
        }
        
        public System.Threading.Tasks.Task<int> CountServicesAsync() {
            return base.Channel.CountServicesAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.IWorkers")]
    public interface IWorkers {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/AddWorker", ReplyAction="http://tempuri.org/IWorkers/AddWorkerResponse")]
        void AddWorker(WcfSERVER.ServiceRef.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/AddWorker", ReplyAction="http://tempuri.org/IWorkers/AddWorkerResponse")]
        System.Threading.Tasks.Task AddWorkerAsync(WcfSERVER.ServiceRef.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/UpdateWorker", ReplyAction="http://tempuri.org/IWorkers/UpdateWorkerResponse")]
        void UpdateWorker(WcfSERVER.ServiceRef.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/UpdateWorker", ReplyAction="http://tempuri.org/IWorkers/UpdateWorkerResponse")]
        System.Threading.Tasks.Task UpdateWorkerAsync(WcfSERVER.ServiceRef.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/DeleteWorker", ReplyAction="http://tempuri.org/IWorkers/DeleteWorkerResponse")]
        void DeleteWorker(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/DeleteWorker", ReplyAction="http://tempuri.org/IWorkers/DeleteWorkerResponse")]
        System.Threading.Tasks.Task DeleteWorkerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/GetWorkers", ReplyAction="http://tempuri.org/IWorkers/GetWorkersResponse")]
        WcfSERVER.ServiceRef.Worker[] GetWorkers(int page, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/GetWorkers", ReplyAction="http://tempuri.org/IWorkers/GetWorkersResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker[]> GetWorkersAsync(int page, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/GetWorkersByFIO", ReplyAction="http://tempuri.org/IWorkers/GetWorkersByFIOResponse")]
        WcfSERVER.ServiceRef.Worker[] GetWorkersByFIO(string FIO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/GetWorkersByFIO", ReplyAction="http://tempuri.org/IWorkers/GetWorkersByFIOResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker[]> GetWorkersByFIOAsync(string FIO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/GetWorkerByID", ReplyAction="http://tempuri.org/IWorkers/GetWorkerByIDResponse")]
        WcfSERVER.ServiceRef.Worker GetWorkerByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/GetWorkerByID", ReplyAction="http://tempuri.org/IWorkers/GetWorkerByIDResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker> GetWorkerByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/CountWorkers", ReplyAction="http://tempuri.org/IWorkers/CountWorkersResponse")]
        int CountWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/CountWorkers", ReplyAction="http://tempuri.org/IWorkers/CountWorkersResponse")]
        System.Threading.Tasks.Task<int> CountWorkersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/AuthorizeWorker", ReplyAction="http://tempuri.org/IWorkers/AuthorizeWorkerResponse")]
        WcfSERVER.ServiceRef.Worker AuthorizeWorker(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkers/AuthorizeWorker", ReplyAction="http://tempuri.org/IWorkers/AuthorizeWorkerResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker> AuthorizeWorkerAsync(string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkersChannel : WcfSERVER.ServiceRef.IWorkers, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkersClient : System.ServiceModel.ClientBase<WcfSERVER.ServiceRef.IWorkers>, WcfSERVER.ServiceRef.IWorkers {
        
        public WorkersClient() {
        }
        
        public WorkersClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkersClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkersClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkersClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddWorker(WcfSERVER.ServiceRef.Worker worker) {
            base.Channel.AddWorker(worker);
        }
        
        public System.Threading.Tasks.Task AddWorkerAsync(WcfSERVER.ServiceRef.Worker worker) {
            return base.Channel.AddWorkerAsync(worker);
        }
        
        public void UpdateWorker(WcfSERVER.ServiceRef.Worker worker) {
            base.Channel.UpdateWorker(worker);
        }
        
        public System.Threading.Tasks.Task UpdateWorkerAsync(WcfSERVER.ServiceRef.Worker worker) {
            return base.Channel.UpdateWorkerAsync(worker);
        }
        
        public void DeleteWorker(int id) {
            base.Channel.DeleteWorker(id);
        }
        
        public System.Threading.Tasks.Task DeleteWorkerAsync(int id) {
            return base.Channel.DeleteWorkerAsync(id);
        }
        
        public WcfSERVER.ServiceRef.Worker[] GetWorkers(int page, int count) {
            return base.Channel.GetWorkers(page, count);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker[]> GetWorkersAsync(int page, int count) {
            return base.Channel.GetWorkersAsync(page, count);
        }
        
        public WcfSERVER.ServiceRef.Worker[] GetWorkersByFIO(string FIO) {
            return base.Channel.GetWorkersByFIO(FIO);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker[]> GetWorkersByFIOAsync(string FIO) {
            return base.Channel.GetWorkersByFIOAsync(FIO);
        }
        
        public WcfSERVER.ServiceRef.Worker GetWorkerByID(int ID) {
            return base.Channel.GetWorkerByID(ID);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker> GetWorkerByIDAsync(int ID) {
            return base.Channel.GetWorkerByIDAsync(ID);
        }
        
        public int CountWorkers() {
            return base.Channel.CountWorkers();
        }
        
        public System.Threading.Tasks.Task<int> CountWorkersAsync() {
            return base.Channel.CountWorkersAsync();
        }
        
        public WcfSERVER.ServiceRef.Worker AuthorizeWorker(string login, string password) {
            return base.Channel.AuthorizeWorker(login, password);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Worker> AuthorizeWorkerAsync(string login, string password) {
            return base.Channel.AuthorizeWorkerAsync(login, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.IOrders")]
    public interface IOrders {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/AddOrder", ReplyAction="http://tempuri.org/IOrders/AddOrderResponse")]
        void AddOrder(WcfSERVER.ServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/AddOrder", ReplyAction="http://tempuri.org/IOrders/AddOrderResponse")]
        System.Threading.Tasks.Task AddOrderAsync(WcfSERVER.ServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/UpdateOrder", ReplyAction="http://tempuri.org/IOrders/UpdateOrderResponse")]
        void UpdateOrder(WcfSERVER.ServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/UpdateOrder", ReplyAction="http://tempuri.org/IOrders/UpdateOrderResponse")]
        System.Threading.Tasks.Task UpdateOrderAsync(WcfSERVER.ServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/DeleteOrder", ReplyAction="http://tempuri.org/IOrders/DeleteOrderResponse")]
        void DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/DeleteOrder", ReplyAction="http://tempuri.org/IOrders/DeleteOrderResponse")]
        System.Threading.Tasks.Task DeleteOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/GetOrders", ReplyAction="http://tempuri.org/IOrders/GetOrdersResponse")]
        WcfSERVER.ServiceRef.Order[] GetOrders(int page, int count, string order_by);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/GetOrders", ReplyAction="http://tempuri.org/IOrders/GetOrdersResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Order[]> GetOrdersAsync(int page, int count, string order_by);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/GetOrdersByClient", ReplyAction="http://tempuri.org/IOrders/GetOrdersByClientResponse")]
        WcfSERVER.ServiceRef.Order[] GetOrdersByClient(int page, int count, string order_by, string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/GetOrdersByClient", ReplyAction="http://tempuri.org/IOrders/GetOrdersByClientResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Order[]> GetOrdersByClientAsync(int page, int count, string order_by, string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/GetOrderByID", ReplyAction="http://tempuri.org/IOrders/GetOrderByIDResponse")]
        WcfSERVER.ServiceRef.Order GetOrderByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/GetOrderByID", ReplyAction="http://tempuri.org/IOrders/GetOrderByIDResponse")]
        System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Order> GetOrderByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/CountOrders", ReplyAction="http://tempuri.org/IOrders/CountOrdersResponse")]
        int CountOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/CountOrders", ReplyAction="http://tempuri.org/IOrders/CountOrdersResponse")]
        System.Threading.Tasks.Task<int> CountOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/PrintOrder", ReplyAction="http://tempuri.org/IOrders/PrintOrderResponse")]
        byte[] PrintOrder(int ID, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/PrintOrder", ReplyAction="http://tempuri.org/IOrders/PrintOrderResponse")]
        System.Threading.Tasks.Task<byte[]> PrintOrderAsync(int ID, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/CalcOrderCost", ReplyAction="http://tempuri.org/IOrders/CalcOrderCostResponse")]
        double CalcOrderCost(WcfSERVER.ServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrders/CalcOrderCost", ReplyAction="http://tempuri.org/IOrders/CalcOrderCostResponse")]
        System.Threading.Tasks.Task<double> CalcOrderCostAsync(WcfSERVER.ServiceRef.Order order);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrdersChannel : WcfSERVER.ServiceRef.IOrders, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrdersClient : System.ServiceModel.ClientBase<WcfSERVER.ServiceRef.IOrders>, WcfSERVER.ServiceRef.IOrders {
        
        public OrdersClient() {
        }
        
        public OrdersClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrdersClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrdersClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrdersClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddOrder(WcfSERVER.ServiceRef.Order order) {
            base.Channel.AddOrder(order);
        }
        
        public System.Threading.Tasks.Task AddOrderAsync(WcfSERVER.ServiceRef.Order order) {
            return base.Channel.AddOrderAsync(order);
        }
        
        public void UpdateOrder(WcfSERVER.ServiceRef.Order order) {
            base.Channel.UpdateOrder(order);
        }
        
        public System.Threading.Tasks.Task UpdateOrderAsync(WcfSERVER.ServiceRef.Order order) {
            return base.Channel.UpdateOrderAsync(order);
        }
        
        public void DeleteOrder(int id) {
            base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(int id) {
            return base.Channel.DeleteOrderAsync(id);
        }
        
        public WcfSERVER.ServiceRef.Order[] GetOrders(int page, int count, string order_by) {
            return base.Channel.GetOrders(page, count, order_by);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Order[]> GetOrdersAsync(int page, int count, string order_by) {
            return base.Channel.GetOrdersAsync(page, count, order_by);
        }
        
        public WcfSERVER.ServiceRef.Order[] GetOrdersByClient(int page, int count, string order_by, string client) {
            return base.Channel.GetOrdersByClient(page, count, order_by, client);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Order[]> GetOrdersByClientAsync(int page, int count, string order_by, string client) {
            return base.Channel.GetOrdersByClientAsync(page, count, order_by, client);
        }
        
        public WcfSERVER.ServiceRef.Order GetOrderByID(int ID) {
            return base.Channel.GetOrderByID(ID);
        }
        
        public System.Threading.Tasks.Task<WcfSERVER.ServiceRef.Order> GetOrderByIDAsync(int ID) {
            return base.Channel.GetOrderByIDAsync(ID);
        }
        
        public int CountOrders() {
            return base.Channel.CountOrders();
        }
        
        public System.Threading.Tasks.Task<int> CountOrdersAsync() {
            return base.Channel.CountOrdersAsync();
        }
        
        public byte[] PrintOrder(int ID, int type) {
            return base.Channel.PrintOrder(ID, type);
        }
        
        public System.Threading.Tasks.Task<byte[]> PrintOrderAsync(int ID, int type) {
            return base.Channel.PrintOrderAsync(ID, type);
        }
        
        public double CalcOrderCost(WcfSERVER.ServiceRef.Order order) {
            return base.Channel.CalcOrderCost(order);
        }
        
        public System.Threading.Tasks.Task<double> CalcOrderCostAsync(WcfSERVER.ServiceRef.Order order) {
            return base.Channel.CalcOrderCostAsync(order);
        }
    }
}
